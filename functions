#!/usr/bin/env bash
#
# Helper functions for main script
#
# Copyright (C) 2016-2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

# Colors
BOLD="\033[1m"
RED="\033[01;31m"
RST="\033[0m"
YLW="\033[01;33m"

# Easy alias for escape codes
function echo() {
    command echo -e "$@"
}

# Help menu function
function help_menu() {
    echo
    echo "${BOLD}OVERVIEW:${RST} Build a gcc toolchain\n"
    echo "${BOLD}USAGE:${RST} ./build <options>\n"
    echo "${BOLD}EXAMPLE:${RST} ./build -a arm64 -s linaro -v 7\n"
    echo "${BOLD}REQUIRED PARAMETERS:${RST}"
    echo "  -a  | --arch:        Possible values: arm, arm64, i686, or x86_64. This is the toolchain's target architecture."
    echo "  -s  | --source:      Possible values: gnu or linaro. This is the GCC source (GNU official vs. Linaro fork)."
    echo "  -v  | --version:     Possible values: (4, 5, 6, 7, and 8* [*GNU only]). This is the GCC version to build.\n"
    echo "${BOLD}OPTIONAL PARAMETERS:${RST}"
    echo "  -nc | --no-clean:    Do not clean up the last compilation (useful if you have a slow machine and your build errors)."
    echo "  -nt | --no-tmpfs:    Do not use tmpfs for building (useful if you don't have much RAM)."
    echo "  -nu | --no-update:   Do not update the downloaded components before building (useful if you have slow internet)."
    echo "  -p  | --package:     Possible values: gz or xz. Compresses toolchain after build.\n"
}

# Prints a formatted header to let the user know what's being done
function header() {
    echo ${RED}
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo ${RST}
}

# Prints an error in bold red
function report_error() {
    echo ""
    echo ${RED}"${1}"${RST}
    [[ ${2} =~ "-n" ]] && echo
    [[ ${2} =~ "-h" ]] && help_menu
    exit
}

# Prints a warning in bold yellow
function report_warning() {
    echo ""
    echo ${YLW}"${1}"${RST}
    [[ ${2} =~ "-n" ]] && echo
}

# Formats the time for the end
function format_time() {
    MINS=$(((${2}-${1})/60))
    SECS=$(((${2}-${1})%60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((${MINS}/60))
        MINS=$((${MINS}%60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo ${TIME_STRING}
}

# Check if user needs to enter sudo password or not
function check_sudo() {
    sudo -n true 2>/dev/null
}
