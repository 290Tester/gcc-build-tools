name: Build GCC 15 with pre-built glibc

on:
  workflow_dispatch:
  push:

env:
  PREFIX:   /data/local/tmp/gnu
  SYSROOT:  /data/local/tmp/Android-tools/usr/ld
  TARGET:   aarch64-linux-gnu
  JOBS:     4

jobs:
  build:
    runs-on: ubuntu-22.04-arm   # GitHub 免费 ARM 机
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      #----------------------------------------------------------
      # 1. 安装编译依赖
      #----------------------------------------------------------
      - name: Install build deps
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            build-essential g++ make gawk bison flex texinfo gettext \
            git curl libgmp-dev libmpfr-dev libmpc-dev libisl-dev \
            zlib1g-dev pkg-config python3 \
            linux-libc-dev-arm64-cross  # 提供 aarch64 kernel headers

      #----------------------------------------------------------
      # 2. 准备目录 & 解压 glibc
      #----------------------------------------------------------
      - name: Setup dirs
        run: |
          sudo mkdir -p "$SYSROOT"
          sudo chown -R $USER:$USER /data/local/tmp

      - name: Debug ld.tar.gz
        run: |
          ls -lh ld.tar.gz
          file  ld.tar.gz

      - name: Extract pre-built glibc
        run: |
          tar -xzf ld.tar.gz -C "$SYSROOT" --checkpoint=.100
          ls -l "$SYSROOT/usr"/

      #----------------------------------------------------------
      # 3. 补 kernel headers（软链，不复制）
      #----------------------------------------------------------
      - name: Link kernel headers
        run: |
          K=/usr/aarch64-linux-gnu/include
          ln -sfn "$K/linux"       "$SYSROOT/usr/include/linux"
          ln -sfn "$K/asm"         "$SYSROOT/usr/include/asm"
          ln -sfn "$K/asm-generic" "$SYSROOT/usr/include/asm-generic"

      #----------------------------------------------------------
      # 4. 克隆最新 GCC 15 源码
      #----------------------------------------------------------
      - name: Clone GCC
        run: |
          cd /data/local/tmp
          git clone --depth=1 -b master git://gcc.gnu.org/git/gcc.git

      #----------------------------------------------------------
      # 5. 配置 & 编译
      #----------------------------------------------------------
      - name: Configure GCC
        run: |
          cd /data/local/tmp
          mkdir build-gcc && cd build-gcc
          ../gcc/configure \
            --prefix="$PREFIX" \
            --target="$TARGET" \
            --with-sysroot="$SYSROOT" \
            --enable-languages=c,c++,lto \
            --enable-threads=posix \
            --enable-libgomp \
            --enable-libssp \
            --enable-libquadmath \
            --enable-lto \
            --enable-shared \
            --disable-multilib \
            --with-newlib \
            --disable-nls \
            --disable-bootstrap

      - name: Build & install
        run: |
          cd /data/local/tmp/build-gcc
          make -j"$JOBS"
          make install

      #----------------------------------------------------------
      # 6. 打包 & 上传
      #----------------------------------------------------------
      - name: Package toolchain
        run: |
          cd /data/local/tmp
          tar czf gcc15-with-prebuilt-glibc.tar.gz gnu/

      - uses: actions/upload-artifact@v4
        with:
          name: gcc15-with-prebuilt-glibc
          path: /data/local/tmp/gcc15-with-prebuilt-glibc.tar.gz
