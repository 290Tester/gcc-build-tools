#!/usr/bin/env bash
# shellcheck disable=SC1117
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2016-2018 USBhost
# Copyright (C) 2016-2017 Joe Maples
# Copyright (C) 2017-2018 Nathan Chancellor
#
# GCC cross compiler  compilation script


###########
# SOURCES #
###########

# http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ # credits for almost everything
# http://www.mpfr.org/
# https://gmplib.org/
# http://www.multiprecision.org/
# http://isl.gforge.inria.fr/
# https://www.gnu.org/software/binutils/
# https://www.gnu.org/software/libc/
# https://www.kernel.org/
# https://git.linaro.org/toolchain/gcc.git # linaro and gnu


#############
# FUNCTIONS #
#############

set -e

COMMON_CONFIG="${BASH_SOURCE%/*}/configs/common.sh"
TAR_CONFIG="${BASH_SOURCE%/*}/configs/tar_source_config.sh"
GIT_CONFIG="${BASH_SOURCE%/*}/configs/git_source_config.sh"
TARGET_CONFIG="${BASH_SOURCE%/*}/configs/target_config.sh"
source ${COMMON_CONFIG}
source ${TAR_CONFIG}
source ${GIT_CONFIG}
source ${TARGET_CONFIG}

function call_cmd() {
    echo "CMD being executed: ${@}"
    local cmd_to_call="${@}"

    if [[ ! -z "${VERBOSE}" ]]; then
        $cmd_to_call
    else
        $cmd_to_call > /dev/null 2>&1
    fi
}

# Help menu function
function help_menu() {
    echo
    echo "${BOLD}OVERVIEW:${RST} Build a gcc toolchain"
    echo
    echo "${BOLD}USAGE:${RST} ${0} <options>"
    echo
    echo "${BOLD}EXAMPLE:${RST} ${0} -a arm64 -v 7"
    echo
    echo "${BOLD}REQUIRED PARAMETERS:${RST}"
    echo "  -a  | --arch:        Possible values: arm, arm64, x86, x86_64, cm4f, riscv-baremetal. This is the toolchain's target architecture."
    echo "  -v  | --version:     Possible values: (4, 5, 6, 7, 8, and master. This is the GCC version to build."
    echo
    echo "${BOLD}OPTIONAL PARAMETERS:${RST}"
    echo "  -f  | --full-src:    Download full git repos instead of shallow clones"
    echo "  -p  | --package:     Possible values: gz or xz. Compresses toolchain after build."
    echo "  -t  | --tarballs:    Use tarballs for binutils, ISL, and, GCC"
    echo "  -V  | --verbose:     Make script print all output, not just errors and the ending information"
    echo
}

# Prints a formatted header to let the user know what's being done
function header() {
    echo -e "${GRN}====$(for i in $(seq ${#1}); do echo -e "=\c"; done)===="
    echo -e "==  ${1}  =="
    echo -e "====$(for i in $(seq ${#1}); do echo -e "=\c"; done)====${RST}"
}

# Prints an error in bold red
function die() {
    echo ""
    echo -e "${RED}${1}${RST}"
    [[ "${*}" =~ "-n" ]] && echo
    [[ "${*}" =~ "-h" ]] && help_menu
    exit
}

# Prints a warning in bold yellow
function warn() {
    echo ""
    echo "${YLW}${1}${RST}"
    [[ "${*}" =~ "-n" ]] && echo
}

# Formats the time for the end
function format_time() {
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}

# git clone wrapper
function git_clone() {
    call_cmd git clone ${DEPTH_FLAG:+"--depth=1"} "${@}"
}

# git fetch wrapper
function git_fetch() {
    call_cmd git fetch ${DEPTH_FLAG:+"--depth=1"} "${@}"
}

function extract() {
    mkdir -p "${2}"
    call_cmd tar xvf "${1}" -C "${2}" --strip-components=1
}

function fetch_source() {
    local full_url=$1
    local folder=$2

    local url_array=($(echo $full_url | tr ";" "\n"))
    local url=${url_array[0]}
    local url_type=""
    local found=false
    local branch=""

    header "FETCHING ${full_url}"

    # find type:
    for type in "${url_array[@]}"; do
      echo "${type}" | grep -q "type=" && local exit_code=$? || local exit_code=$?
      if [ ${exit_code} == 0 ]; then
        url_type=${type#*type=}
        found=true
        break
      fi
    done
    ${found} || die "No valid type found in url ${full_url}!"
    found=false
    echo "urltype ${url_type}"

    # Check if it is a tarball
    if [ "${url_type}" == "tar" ]; then
        local FILE_NAME=$(basename "${url}")
        if [[ ! -f ${FILE_NAME} ]]; then
            call_cmd axel ${url}
            extract ${FILE_NAME} ${folder}
        fi
        return
    fi

    # find branch:
    for branch in "${url_array[@]}"; do
      echo "${branch}" | grep -q "branch=" && local exit_code=$? || local exit_code=$?
      if [ ${exit_code} == 0 ]; then
        branch=${branch#*branch=}
        found=true
        break
      fi
    done
    ${found} || die "No valid branch found in url ${full_url}!"
    found=false
    echo "BRANCH: ${branch}"

    # Check if it is a git repo
    if [ "${url_type}" == "git" ]; then
        if [[ ! -d ${folder} ]]; then
            git_clone ${url} ${folder} -b ${branch}
        fi
        return
    fi

    # Check if it is a svn repo
    if [ "${url_type}" == "svn" ]; then
        local module=""
        # find svn module:
        for module in "${url_array[@]}"; do
          echo "${module}" | grep -q "module=" && local exit_code=$? || local exit_code=$?
          if [ ${exit_code} == 0 ]; then
            module=${module#*module=}
            break
          fi
        done
        echo "MODULE: ${module}"

        if [[ ! -d ${folder} ]]; then
            svn co ${url}${branch}${module} ${folder}
        fi
        return
    fi
}

function set_build_state() {
    touch ${BUILD_STATE_DIR}/${1}
}

function check_build_state() {
    if [ -e ${BUILD_STATE_DIR}/${1} ];then
        return 0
    else
        return 1
    fi
}

# Initial setup
function setup_variables() {
    # Colors
    BOLD="\033[1m"
    RED="\033[01;31m"
    RST="\033[0m"
    YLW="\033[01;33m"
    GRN="\033[1;32m"

    JOBS="-j$(($(nproc --all) + 1))"

    # Start of script
    START=$(date +%s)
}

function setup_environment() {
    ROOT="${PWD}"
    SOURCES_DIR="${ROOT}/sources"
    BUILD_STATE_DIR="${ROOT}/state"
    BUILD_DIR="${ROOT}/build_dir"
    INSTALL="${ROOT}/toolchain"

    # Maybe not needed!?
    export PATH=${INSTALL}/bin:${PATH}

    mkdir -p ${SOURCES_DIR}
    mkdir -p ${BUILD_STATE_DIR}
}

# Parse parameters
function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case "${1}" in
            # REQUIRED FLAGS
            "-a"|"--arch") shift && ARCH=${1} ;;
            "-v"|"--version") shift && VERSION=${1} ;;

            # OPTIONAL FLAGS
            "-f"|"--full-src") FULL_SOURCE=true ;;
            "-nu"|"--no-update") NO_UPDATE=true ;;
            "-p"|"--package") shift && COMPRESSION=${1} ;;
            "-t"|"--tarballs") TARBALLS=true ;;
            "-V"|"--verbose") VERBOSE=true ;;

            # HELP!
            "-h"|"--help") help_menu; exit ;;
        esac

        shift
    done

    [[ -z ${FULL_SOURCE} ]] && DEPTH_FLAG=true

    # Default values
    case "${ARCH}" in
        "arm") TARGET="arm-linux-gnueabi" ;;
        "arm64") TARGET="aarch64-linux-gnu" ;;
        "x86") TARGET="i686-linux-gnu" ;;
        "x86_64") TARGET="x86_64-linux-gnu" ;;
        "riscv") TARGET="riscv64-linux-gnu" ;;
        "cm4f") TARGET="arm-none-eabi" ;;
        "avr8") TARGET="avr" ;;
        "riscv-baremetal") TARGET="riscv32-none-elf" ;;
        *) die "Absent or invalid arch specified!" -h ;;
    esac

    setup_environment

    if [[ -z ${TARBALLS} ]]; then
        # Search for a valid target config
        type -t config_${TARGET} > /dev/null || die "No git config found for ${TARGET}!"
        config_${TARGET} ${VERSION} git
    else
        # Search for a valid target config
        type -t config_${TARGET} > /dev/null || die "No tar config found for ${TARGET}!"
        config_${TARGET} ${VERSION} tar
    fi
}

function download_sources() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    cd ${SOURCES_DIR} || die "Failed to create sources directory!"

    for download_func in "${DOWNLOAD_FUNCS[@]}"
    do
        ${download_func}
    done

    cd ${ROOT}

    set_build_state ${FUNCNAME[0]}
}

# Step 1. Binutils
function build_binutils() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    header "BUILDING BINUTILS"
    mkdir -p ${BUILD_DIR}/build-binutils
    cd ${BUILD_DIR}/build-binutils
    call_cmd ${SOURCES_DIR}/binutils-${BINUTILS}/configure "${BINUTILS_CONFIGURATION[@]}"
    call_cmd make ${JOBS} all || die "Error while building binutils!" -n
    call_cmd make install || die "Error while installing binutils!" -n

    set_build_state ${FUNCNAME[0]}
}

# Step 2. Linux Kernel Headers
function build_headers() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    header "MAKING LINUX HEADERS"
    cd ${SOURCES_DIR}/linux-${LINUX} || die "Linux kernel folder does not exist!"
    call_cmd make ARCH="${ARCH}" \
        INSTALL_HDR_PATH="${INSTALL}/${TARGET}" \
        headers_install ${JOBS} || die "Error while building/installing Linux headers!" -n

    set_build_state ${FUNCNAME[0]}
}

# Step 3. C/C++ Compilers
function build_gcc_stage_1() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    header "MAKING GCC STAGE 1"

    ln -sfn "${SOURCES_DIR}/mpfr-${MPFR}" ${SOURCES_DIR}/gcc-${GCC}/mpfr
    ln -sfn "${SOURCES_DIR}/gmp-${GMP}" ${SOURCES_DIR}/gcc-${GCC}/gmp
    ln -sfn "${SOURCES_DIR}/mpc-${MPC}" ${SOURCES_DIR}/gcc-${GCC}/mpc
    ln -sfn "${SOURCES_DIR}/isl-${ISL}" ${SOURCES_DIR}/gcc-${GCC}/isl
    ln -sfn "${SOURCES_DIR}/cloog-${CLOOG}" ${SOURCES_DIR}/gcc-${GCC}/cloog

    mkdir -p ${BUILD_DIR}/build-gcc
    cd ${BUILD_DIR}/build-gcc || die "GCC build folder does not exist!"
    call_cmd ${SOURCES_DIR}/gcc-${GCC}/configure "${GCC_CONFIGURATION[@]}"
    call_cmd make ${JOBS} all-gcc || die "Error while building gcc stage1!" -n
    call_cmd make ${JOBS} install-gcc || die "Error while installing gcc stage1!" -n

    set_build_state ${FUNCNAME[0]}
}

# Build newlib
function build_newlib() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    header "MAKING NEWLIB"

    mkdir -p ${BUILD_DIR}/build-newlib
    cd ${BUILD_DIR}/build-newlib || die "newlib build folder does not exist!"
    call_cmd ${SOURCES_DIR}/newlib-${NEWLIB}/configure "${NEWLIB_CONFIGURATION[@]}"
    call_cmd make all || die "Error while building newlib!" -n
    call_cmd make install || die "Error while installing newlib!" -n

    set_build_state ${FUNCNAME[0]}
}

# Build avr libc
function build_avrlibc() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    header "MAKING AVRLIBC"

    # bootstrap fixup
    if [[ ! -f ${SOURCES_DIR}/avrlibc-${AVRLIBC}/configure ]]; then
        cd ${SOURCES_DIR}/avrlibc-${AVRLIBC}/
        call_cmd ./bootstrap
        cd ${ROOT}
    fi

    mkdir -p ${BUILD_DIR}/build-avrlibc
    cd ${BUILD_DIR}/build-avrlibc || die "avrlibc build folder does not exist!"
    call_cmd ${SOURCES_DIR}/avrlibc-${AVRLIBC}/configure "${AVRLIBC_CONFIGURATION[@]}"
    call_cmd make || die "Error while building avrlibc!" -n
    call_cmd make install || die "Error while installing avrlibc!" -n

    set_build_state ${FUNCNAME[0]}
}

# Step 4. Standard C Library Headers and Startup Files
function build_glibc_header() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    header "MAKING GLIBC HEADERS"
    mkdir -p ${BUILD_DIR}/build-glibc
    cd ${BUILD_DIR}/build-glibc || die "glibc build folder does not exist!"
    call_cmd ${SOURCES_DIR}/glibc-${GLIBC}/configure "${GLIBC_CONFIGURATION[@]}"

    call_cmd make install-bootstrap-headers=yes install-headers || die "Error while building glibc headers!" -n
    call_cmd make ${JOBS} csu/subdir_lib || die "Error while building glibc headers 2!" -n
    call_cmd install csu/crt1.o csu/crti.o csu/crtn.o ${INSTALL}/${TARGET}/lib || die "Error while installing crt" -n
    call_cmd ${INSTALL}/bin/${TARGET}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${INSTALL}/${TARGET}/lib/libc.so || die "Error while building libc" -n
    touch ${INSTALL}/${TARGET}/include/gnu/stubs.h

    set_build_state ${FUNCNAME[0]}
}

# Step 5. Compiler Support Library
function build_gcc_stage2() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    header "MAKING GCC STAGE 2"

    mkdir -p ${BUILD_DIR}/build-gcc
    cd ${BUILD_DIR}/build-gcc || die "GCC build folder does not exist!"
    call_cmd make ${JOBS} all-target-libgcc || die "Error while building gcc stage2" -n
    call_cmd make install-target-libgcc || die "Error while building gcc stage2" -n

    set_build_state ${FUNCNAME[0]}
}

# Step 6. Standard C Library & the rest of Glibc
function build_glibc() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    header "MAKING GLIBC"
    cd ${BUILD_DIR}/build-glibc || die "glibc build folder does not exist!"
    call_cmd make ${JOBS} || die "Error while building glibc"
    call_cmd make install || die "Error while installing glibc"

    set_build_state ${FUNCNAME[0]}
}

# Step 7. Standard C++ Library & the rest of GCC
function build_gcc_final() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    header "MAKING GCC FINAL"
    cd ${BUILD_DIR}/build-gcc || die "GCC build folder does not exist!"

    # We need to reconfigure if there is a final config available
    if [[ ! -z "${GCC_FINAL_CONFIGURATION[@]}" ]]; then
       call_cmd ${SOURCES_DIR}/gcc-${GCC}/configure "${GCC_FINAL_CONFIGURATION[@]}"
    fi

    call_cmd make ${JOBS} all || die "Error while building gcc final" -n
    call_cmd make install || die "Error while gcc final install" -n

    set_build_state ${FUNCNAME[0]}
}

# Package toolchain
function package_tc() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    if [[ -n ${COMPRESSION} ]]; then
        PACKAGE=${TARGET}-${VERSION}.x-$(TZ=UTC date +%Y%m%d).tar.${COMPRESSION}

        header "PACKAGING TOOLCHAIN"

        echo "Target file: ${PACKAGE}"

        case "${COMPRESSION}" in
            "gz")
                echo "Packaging with GZIP..."
                GZ_OPT=-9 tar -c --use-compress-program=pigz -f "${PACKAGE}" ${TARGET} ;;
            "xz")
                echo "Packaging with XZ..."
                XZ_OPT=-9 tar -c --use-compress-program=pxz -f "${PACKAGE}" ${TARGET} ;;
            *)
                die "Invalid compression specified... skipping" ;;
        esac
    fi

    set_build_state ${FUNCNAME[0]}
}

# Ending information
function ending_info() {

    check_build_state ${FUNCNAME[0]} && return
    cd ${ROOT}
    # use clean hashtable
    hash -r

    END=$(date +%s)

    if [[ -e ${INSTALL}/bin/${TARGET}-gcc ]]; then
        header "BUILD SUCCESSFUL"
        echo -e "${BOLD}Script duration:${RST} $(format_time "${START}" "${END}")"
        echo -e "${BOLD}GCC version:${RST} $(${INSTALL}/bin/${TARGET}-gcc --version | head -n 1)"
        if [[ -n ${COMPRESSION} ]] && [[ -e ${PACKAGE} ]]; then
            echo -e "${BOLD}File location:${RST} $(pwd)/${PACKAGE}"
            echo -e "${BOLD}File size:${RST} $(du -h "${PACKAGE}" | awk '{print $1}')"
        else
            echo -e "${BOLD}Toolchain location:${RST} $(pwd)/${TARGET}"
        fi
    else
        header "BUILD FAILED"
    fi

    # Alert to script end
    echo -e "\a"

    set_build_state ${FUNCNAME[0]}
}

parse_parameters "${@}"
setup_variables
download_sources

# Go through all build functions
for build_func in "${BUILD_FUNCS[@]}"
do
    ${build_func}
done

package_tc
ending_info
