#!/usr/bin/env bash
# shellcheck disable=SC1117
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2016-2018 USBhost
# Copyright (C) 2016-2017 Joe Maples
# Copyright (C) 2017-2018 Nathan Chancellor
#
# GCC cross compiler  compilation script


###########
# SOURCES #
###########

# http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ # credits for almost everything
# http://www.mpfr.org/
# https://gmplib.org/
# http://www.multiprecision.org/
# http://isl.gforge.inria.fr/
# https://www.gnu.org/software/binutils/
# https://www.gnu.org/software/libc/
# https://www.kernel.org/
# https://git.linaro.org/toolchain/gcc.git # linaro and gnu


#############
# FUNCTIONS #
#############

set -e

TAR_CONFIG="${BASH_SOURCE%/*}/tar_source_config.sh"
GIT_CONFIG="${BASH_SOURCE%/*}/git_source_config.sh"
source ${TAR_CONFIG}
source ${GIT_CONFIG}


# Easy alias for escape codes
function echo() {
    command echo -e "${@}"
}


# Help menu function
function help_menu() {
    echo
    echo "${BOLD}OVERVIEW:${RST} Build a gcc toolchain"
    echo
    echo "${BOLD}USAGE:${RST} ${0} <options>"
    echo
    echo "${BOLD}EXAMPLE:${RST} ${0} -a arm64 -s linaro -v 7"
    echo
    echo "${BOLD}REQUIRED PARAMETERS:${RST}"
    echo "  -a  | --arch:        Possible values: arm, arm64, i686, or x86_64. This is the toolchain's target architecture."
    echo "  -s  | --source:      Possible values: gnu or linaro. This is the GCC source (GNU official vs. Linaro fork)."
    echo "  -v  | --version:     Possible values: (4, 5, 6, 7, 8*, and 9* [*GNU only]). This is the GCC version to build."
    echo
    echo "${BOLD}OPTIONAL PARAMETERS:${RST}"
    echo "  -f  | --full-src:    Download full git repos instead of shallow clones"
    echo "  -nt | --no-tmpfs:    Do not use tmpfs for building (useful if you don't have much RAM)."
    echo "  -nu | --no-update:   Do not update the downloaded components before building (useful if you have slow internet)."
    echo "  -p  | --package:     Possible values: gz or xz. Compresses toolchain after build."
    echo "  -t  | --tarballs:    Use tarballs for binutils, ISL, and, GCC"
    echo "  -V  | --verbose:     Make script print all output, not just errors and the ending information"
    echo
}


# Prints a formatted header to let the user know what's being done
function header() {
    [[ "${*}" =~ "--no-first-echo" ]] || echo
    # shellcheck disable=SC2034
    echo "${RED}====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    # shellcheck disable=SC2034
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)====${RST}"
    [[ "${*}" =~ "--no-second-echo" ]] || echo
}


# Prints an error in bold red
function die() {
    [[ -z ${VERBOSE} ]] && exec 1>&5 2>&6
    echo ""
    echo "${RED}${1}${RST}"
    [[ "${*}" =~ "-n" ]] && echo
    [[ "${*}" =~ "-h" ]] && help_menu
    exit
}


# Prints a warning in bold yellow
function warn() {
    echo ""
    echo "${YLW}${1}${RST}"
    [[ "${*}" =~ "-n" ]] && echo
}


# Formats the time for the end
function format_time() {
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}


# Check if user needs to enter sudo password or not
function check_sudo() {
    echo
    echo "Checking if sudo is available, please enter your password if a prompt appears!"
    if ! sudo -v 2>/dev/null; then
        warn "Sudo is not available! Disabling the option for tmpfs..." -n
        NO_TMPFS=true
    fi
}


# Unmount tmpfs
function unmount_tmpfs() {
    if [[ -z ${NO_TMPFS} ]]; then
        sudo umount -f build-glibc 2>/dev/null
        sudo umount -f build-gcc 2>/dev/null
        sudo umount -f build-binutils 2>/dev/null
    fi
}


# git clone wrapper
function git_clone() {
    git clone ${DEPTH_FLAG:+"--depth=1"} "${@}"
}


# git fetch wrapper
function git_fetch() {
    git fetch ${DEPTH_FLAG:+"--depth=1"} "${@}"
}

function extract() {
    case "${1}" in
        *.gz) UNPACK=pigz ;;
        *.xz) UNPACK=pxz ;;
    esac
    mkdir -p "${2}"
    ${UNPACK} -d < "${1}" | tar -xC "${2}" --strip-components=1
}

function set_build_state() {
    touch ${BUILD_STATE_DIR}/${1}
}

function check_build_state() {
    if [ -e ${BUILD_STATE_DIR}/${1} ];then
        return 0
    else
        return 1
    fi
}

function setup_environment() {
    ROOT=${PWD}
    PREBUILTS_BIN=${ROOT}/prebuilts/bin
    INSTALL=${ROOT}/${TARGET}
    SOURCES_DIR=${ROOT}/sources
    BUILD_STATE_DIR="${ROOT}/state"
    BUILD_DIR="${ROOT}/build_dir"

    export PATH=${PREBUILTS_BIN}:${PATH}

    # Maybe not needed!?
    export PATH=${INSTALL}/bin:${PATH}

    mkdir -p ${SOURCES_DIR}
    mkdir -p ${BUILD_STATE_DIR}
}

# Initial setup
function setup_variables() {
    # Colors
    BOLD="\033[1m"
    RED="\033[01;31m"
    RST="\033[0m"
    YLW="\033[01;33m"

    # Configuration variables
    CONFIGURATION=( "--disable-multilib" "--disable-werror" )
    JOBS="-j$(($(nproc --all) + 1))"

    # Start of script
    START=$(date +%s)
}


# Parse parameters
function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case "${1}" in
            # REQUIRED FLAGS
            "-a"|"--arch") shift && ARCH=${1} ;;
            "-s"|"--source") shift && SOURCE=${1} ;;
            "-v"|"--version") shift && VERSION=${1} ;;

            # OPTIONAL FLAGS
            "-f"|"--full-src") FULL_SOURCE=true ;;
            "-nt"|"--no-tmpfs") NO_TMPFS=true ;;
            "-nu"|"--no-update") NO_UPDATE=true ;;
            "-p"|"--package") shift && COMPRESSION=${1} ;;
            "-t"|"--tarballs") TARBALLS=true ;;
            "-V"|"--verbose") VERBOSE=true ;;

            # HELP!
            "-h"|"--help") help_menu; exit ;;
        esac

        shift
    done

    [[ -z ${NO_TMPFS} ]] && check_sudo
    [[ -z ${VERBOSE} ]] && exec 6>&2 5>&1 &>/dev/null
    [[ -z ${FULL_SOURCE} ]] && DEPTH_FLAG=true

    # Default values
    case "${ARCH}" in
        "arm") TARGET="arm-linux-gnueabi" ;;
        "arm64") TARGET="aarch64-linux-gnu" ;;
        "i686") TARGET="i686-linux-gnu" ;;
        "x86_64") TARGET="x86_64-linux-gnu" ;;
        *) die "Absent or invalid arch specified!" -h ;;
    esac

    if [[ -z ${TARBALLS} ]]; then
        # Set GCC branch based on version and Linaro or not
        case "${SOURCE}:${VERSION}" in
            "gnu:4") die "Will not build, Use Linaro instead" ;;
            "gnu:5") setup_variables_git_gnu_5 ;;
            "gnu:6") setup_variables_git_gnu_6 ;;
            "gnu:7") setup_variables_git_gnu_7 ;;
            "gnu:8") setup_variables_git_gnu_8 ;;
            "gnu:9") setup_variables_git_gnu_9 ;;
            "linaro:4") setup_variables_git_linaro_4 ;;
            "linaro:5") setup_variables_git_linaro_5 ;;
            "linaro:6") setup_variables_git_linaro_6 ;;
            "linaro:7") setup_variables_git_linaro_7 ;;
            "linaro:8") die "There's no such thing as Linaro 8.x Clannad..." -h ;;
            "linaro:9") die "There's no such thing as Linaro 9.x Clannad..." -h ;;
            *) die "Absent or invalid GCC version or source specified!" -h ;;
        esac
    else
        # Set GCC branch based on version and Linaro or not
        case "${SOURCE}:${VERSION}" in
            "gnu:4") die "Will not build, Use Linaro instead" ;;
            "gnu:5") setup_variables_tar_gnu_5 ;;
            "gnu:6") setup_variables_tar_gnu_6 ;;
            "gnu:7") setup_variables_tar_gnu_7 ;;
            "gnu:8") setup_variables_tar_gnu_8 ;;
            "gnu:9") die "GCC 9.0 is currently a WIP so there is no tarball to download! Either use the git repo or choose a new version..." ;;
            "linaro:4") setup_variables_tar_linaro_4 ;;
            "linaro:5") setup_variables_tar_linaro_5 ;;
            "linaro:6") setup_variables_tar_linaro_6 ;;
            "linaro:7") setup_variables_tar_linaro_7 ;;
            "linaro:8") die "There's no such thing as Linaro 8.x Clannad..." -h ;;
            "linaro:9") die "There's no such thing as Linaro 9.x Clannad..." -h ;;
            *) die "Absent or invalid GCC version or source specified!" -h ;;
        esac
    fi
}


# Clean up from a previous compilation
function clean_up() { #FIXME: we dont need to remove everything everytime.
    header "CLEANING UP"

    unmount_tmpfs
    git clean -fxdq -e sources -e prebuilts || true
    find . -maxdepth 1 -type l -exec rm -rf {} \; #FIXME
    if [[ -d binutils ]] ||
       [[ -d build-binutils ]] ||
       [[ -d build-gcc ]] ||
       [[ -d build-glibc ]] ||
       [[ -d gcc ]] ||
       [[ -d linux ]] ||
       [[ -f ${TARGET} ]] ||
       [[ $(for FILE in *.tar.*; do if [[ -f "${FILE}" ]]; then echo "true"; break; else echo "false"; fi done) = "true" ]]; then

        die "Clean up failed! Aborting. Try checking that you have proper permissions to delete files."
    else
        echo "Clean up successful!"
    fi
}


function build_binaries() {

    check_build_state ${FUNCNAME[0]} && return

    local AXEL=${ROOT}/sources/axel
    [[ ! -d ${AXEL} ]] && git -C "$(dirname "${AXEL}")" clone --depth=1 https://github.com/axel-download-accelerator/axel
    git -C "${AXEL}" clean -fxdq
    git -C "${AXEL}" pull
    (
        cd "${AXEL}" || die "Issue with cloning axel source!"
        ./autogen.sh
        ./configure --prefix="$(dirname "${PREBUILTS_BIN}")"
        make ${JOBS} || die "Error building axel!"
        make ${JOBS} install || die "Error installing axel!"
    )

    local PIGZ=${ROOT}/sources/pigz
    [[ ! -d ${PIGZ} ]] && git -C "$(dirname "${PIGZ}")" clone --depth=1 https://github.com/madler/pigz
    git -C "${PIGZ}" clean -fxdq
    git -C "${PIGZ}" pull
    make -C "${PIGZ}" ${JOBS} pigz || die "Error building pigz!"
    mv "${PIGZ}"/pigz "${PREBUILTS_BIN}"

    local PXZ=${ROOT}/sources/pxz
    [[ ! -d ${PXZ} ]] && git -C "$(dirname "${PXZ}")" clone --depth=1 https://github.com/jnovy/pxz
    git -C "${PXZ}" clean -fxdq
    git -C "${PXZ}" pull
    make -C "${PXZ}" ${JOBS} pxz || die "Error building pxz!"
    mv "${PXZ}"/pxz "${PREBUILTS_BIN}"

    set_build_state ${FUNCNAME[0]}
}


function download_sources() {

    check_build_state ${FUNCNAME[0]} && return

    cd ${SOURCES_DIR} || die "Failed to create sources directory!"

    if [[ -z ${TARBALLS} ]]; then
        if [[ ! -d glibc-${GLIBC} ]]; then
            header "DOWNLOADING GLIBC"
            git_clone ${GLIBC_GIT_URL} glibc-${GLIBC} -b ${GLIBC}
        fi

        if [[ ! -d linux-${LINUX} ]]; then
            header "DOWNLOADING LINUX KERNEL"
            git_clone ${LINUX_GIT_URL} linux-${LINUX} -b ${LINUX}
        fi

        if [[ ! -d binutils-${BINUTILS} ]]; then
            header "DOWNLOADING BINUTILS"
            git_clone ${BINUTILS_GIT_URL} binutils-${BINUTILS} -b ${BINUTILS}
        fi

        if [[ ! -d gcc-${GCC} ]]; then
            header "DOWNLOADING GCC"
            git_clone ${GCC_GIT_URL} gcc-${GCC} -b ${GCC}
        fi
    else
        if [[ ! -f ${GLIBC}.tar.xz ]]; then
            header "DOWNLOADING GLIBC"
            axel ${GLIBC_BASE_URL}${GLIBC}.tar.xz
        fi

        if [[ ! -f linux-${LINUX}.tar.xz ]]; then
            header "DOWNLOADING LINUX KERNEL"
            axel ${LINUX_BASE_URL}${LINUX}.tar.xz
        fi

        if [[ ! -f binutils-${BINUTILS}.tar.xz ]]; then
            header "DOWNLOADING BINUTILS"
            axel ${BINUTILS_BASE_URL}${BINUTILS}.tar.xz
        fi

        if [[ ! -f ${GCC}.tar.gz ]]; then
            header "DOWNLOADING GCC"
            axel ${GCC_BASE_URL}/${GCC}/${GCC}.tar.gz
        fi
    fi

    if [[ ! -f ${MPC}.tar.gz ]]; then
        header "DOWNLOADING MPC"
        axel ${MPC_BASE_URL}${MPC}.tar.gz
    fi

    if [[ ! -f ${ISL}.tar.xz ]]; then
        header "DOWNLOADING ISL ${ISL} FOR GCC ${VERSION}"
        axel ${ISL_BASE_URL}${ISL}.tar.xz
    fi

    if [[ ! -f ${MPFR}.tar.xz ]]; then
        header "DOWNLOADING MPFR"
        axel ${MPFR_BASE_URL}${MPFR}.tar.xz
    fi

    if [[ ! -f ${GMP}.tar.xz ]]; then
        header "DOWNLOADING GMP"
        axel ${GMP_BASE_URL}${GMP}.tar.xz
    fi

    cd ${ROOT}

    set_build_state ${FUNCNAME[0]}
}

# Extract tarballs to their proper locations
function extract_sources() {

    check_build_state ${FUNCNAME[0]} && return

    header "EXTRACTING DOWNLOADED TARBALLS"

    cd ${SOURCES_DIR}

    extract ${MPFR}.tar.xz ${SOURCES_DIR}/mpfr-${MPFR}
    extract ${GMP}.tar.xz ${SOURCES_DIR}/gmp-${GMP}
    extract ${MPC}.tar.gz ${SOURCES_DIR}/mpc-${MPC}
    extract ${ISL}.tar.xz ${SOURCES_DIR}/isl-${ISL}
    
    if [[ -n ${TARBALLS} ]]; then
        extract ${GLIBC}.tar.xz ${SOURCES_DIR}/glibc-${GLIBC}
        extract linux-${LINUX}.tar.xz ${SOURCES_DIR}/linux-${LINUX}
        extract binutils-${BINUTILS}.tar.xz ${SOURCES_DIR}/binutils-${BINUTILS}
        extract ${GCC}.tar.gz ${SOURCES_DIR}/gcc-${GCC}
    fi

    set_build_state ${FUNCNAME[0]}
}


# Update git repos
function update_repos() {
    if [[ -z ${NO_UPDATE} && -z ${TARBALLS} ]]; then
        header "UPDATING SOURCES"
        (
            cd isl || die "ISL did not get cloned properly!"
            git remote update
            git checkout ${ISL}
            git reset --hard HEAD
            ./autogen.sh
        )
        (
            cd binutils || die "binutils did not get cloned properly!"
            [[ -n ${FULL_SOURCE} ]] && BRANCH=origin/${BINUTILS} || BRANCH=FETCH_HEAD
            git_fetch origin ${BINUTILS}
            git checkout ${BINUTILS} || git checkout -b ${BINUTILS} ${BRANCH}
            git reset --hard ${BRANCH}
        )
        (
            cd gcc || die "GCC did not get cloned properly!"
            [[ -n ${FULL_SOURCE} ]] && BRANCH=origin/${GCC} || BRANCH=FETCH_HEAD
            git_fetch origin ${GCC}
            git checkout ${GCC} || git checkout -b ${GCC} ${BRANCH}
            git reset --hard ${BRANCH}
        )
    else
        if [[ -d isl ]]; then
            (
                cd isl || die "ISL did not get downloaded properly!"
                ./autogen.sh
            )
        fi
    fi

    cd ..

    [[ ! -d linux ]] && ln -s sources/linux linux
    [[ ! -d binutils ]] && ln -s sources/binutils binutils
    [[ ! -d gcc ]] && ln -s sources/gcc gcc
}


# Setup source folders and build folders
function setup_env() {

    [[ ! -d gcc ]] && die "GCC source is missing! Please check your connection and rerun the script!" -h

    mkdir build-glibc
    mkdir build-gcc
    mkdir build-binutils

    if [[ -z ${NO_TMPFS} ]]; then
        sudo mount -t tmpfs -o rw none build-glibc
        sudo mount -t tmpfs -o rw none build-gcc
        sudo mount -t tmpfs -o rw none build-binutils
    fi

    cd gcc || die "GCC folder does not exit!"
    ln -s -f "${ROOT}/${MPFR}" mpfr
    ln -s -f "${ROOT}/${GMP}" gmp
    ln -s -f "${ROOT}/${MPC}" mpc
    if [[ -n ${TARBALLS} ]]; then
        ln -s -f "${ROOT}/${ISL}" isl
    else
        ln -s -f "${ROOT}/isl" isl
    fi
    cd ..

    if [[ -z ${VERBOSE} ]]; then
        exec 1>&5 2>&6
        header "BUILDING TOOLCHAIN"
        exec 6>&2 5>&1 &>/dev/null
    fi
}


# Build binutils
function build_binutils() {

    check_build_state ${FUNCNAME[0]} && return

    header "BUILDING BINUTILS"
    mkdir -p ${BUILD_DIR}/build-binutils
    cd ${BUILD_DIR}/build-binutils
    ${SOURCES_DIR}/binutils-${BINUTILS}/configure "${CONFIGURATION[@]}" \
                          --target=${TARGET} \
                          --prefix="${INSTALL}" \
                          --disable-gdb
    make ${JOBS} || die "Error while building binutils!" -n
    make install ${JOBS} || die "Error while installing binutils!" -n

    set_build_state ${FUNCNAME[0]}
}


# Make Linux kernel headers
function build_headers() {

    check_build_state ${FUNCNAME[0]} && return

    header "MAKING LINUX HEADERS"
    cd ${SOURCES_DIR}/linux-${LINUX} || die "Linux kernel folder does not exist!"
    make ARCH="${ARCH}" \
        INSTALL_HDR_PATH="${INSTALL}/${TARGET}" \
        headers_install ${JOBS} || die "Error while building/installing Linux headers!" -n

    set_build_state ${FUNCNAME[0]}
}


# Build GCC
function build_gcc() {

    check_build_state ${FUNCNAME[0]} && return

    header "MAKING GCC"

    ln -sfn "${SOURCES_DIR}/mpfr-${MPFR}" ${SOURCES_DIR}/gcc-${GCC}/mpfr
    ln -sfn "${SOURCES_DIR}/gmp-${GMP}" ${SOURCES_DIR}/gcc-${GCC}/gmp
    ln -sfn "${SOURCES_DIR}/mpc-${MPC}" ${SOURCES_DIR}/gcc-${GCC}/mpc
    ln -sfn "${SOURCES_DIR}/isl-${ISL}" ${SOURCES_DIR}/gcc-${GCC}/isl

    mkdir -p ${BUILD_DIR}/build-gcc
    cd ${BUILD_DIR}/build-gcc || die "GCC build folder does not exist!"
    ${SOURCES_DIR}/gcc-${GCC}/configure "${CONFIGURATION[@]}" \
                     --enable-languages=c \
                     --target=${TARGET} \
                     --prefix=${INSTALL}
    make all-gcc ${JOBS} || die "Error while building gcc!" -n
    make install-gcc ${JOBS} || die "Error while installing gcc!" -n
    if [[ ${ARCH} = "x86_64" ]]; then
        make all-target-libgcc ${JOBS} || die "Error while installing libgcc for host!" -n
        make install-target-libgcc ${JOBS} || die "Error while installing libgcc for target!" -n
    fi

    set_build_state ${FUNCNAME[0]}
}


# Build glibc
function build_glibc() {

    check_build_state ${FUNCNAME[0]} && return

    header "MAKING GLIBC"
    mkdir -p ${BUILD_DIR}/build-glibc
    cd ${BUILD_DIR}/build-glibc || die "glibc build folder does not exist!"
    ${SOURCES_DIR}/glibc-${GLIBC}/configure --prefix="${INSTALL}/${TARGET}" \
                          --build="${MACHTYPE}" \
                          --host=${TARGET} \
                          --target=${TARGET} \
                          --with-headers="${INSTALL}/${TARGET}/include" \
                          "${CONFIGURATION[@]}" libc_cv_forced_unwind=yes
    make install-bootstrap-headers=yes install-headers ${JOBS} || die "Error installing headers for glibc!" -n
    make csu/subdir_lib ${JOBS} || die "Error while making subdir_lib for glibc!" -n
    install csu/crt1.o csu/crti.o csu/crtn.o "${INSTALL}/${TARGET}/lib"
    ${TARGET}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o "${INSTALL}/${TARGET}/lib/libc.so"
    touch "${INSTALL}/${TARGET}/include/gnu/stubs.h"
    if [[ ${ARCH} = "x86_64" || ${ARCH} = "i686" ]]; then
        make ${JOBS} || die "Error while building glibc for the host!" -n
        make install ${JOBS} || die "Error while installing glibc for the host!" -n
    else
        cd ${BUILD_DIR}/build-gcc || die "GCC build folder does not exist!"
        make all-target-libgcc ${JOBS} || die "Error while building libgcc for target!" -n
        make install-target-libgcc ${JOBS} || die "Error while installing libgcc for target!" -n

        cd ${BUILD_DIR}/build-glibc || die "glibc build folder does not exist!"
        make ${JOBS} || die "Error while building glibc for target" -n
        make install ${JOBS} || die "Error while installing glibc for target" -n
    fi

    set_build_state ${FUNCNAME[0]}
}


# Install GCC
function install_gcc() {

    check_build_state ${FUNCNAME[0]} && return

    header "INSTALLING GCC"
    cd ../build-gcc || die "GCC build folder does not exist!"
    make all ${JOBS} || die "Error while compiling final toolchain!" -n
    make install ${JOBS} || die "Error while installing final toolchain!" -n
    cd ..

    set_build_state ${FUNCNAME[0]}
}


# Package toolchain
function package_tc() {

    check_build_state ${FUNCNAME[0]} && return

    if [[ -n ${COMPRESSION} ]]; then
        PACKAGE=${TARGET}-${VERSION}.x-${SOURCE}-$(TZ=UTC date +%Y%m%d).tar.${COMPRESSION}

        header "PACKAGING TOOLCHAIN"

        echo "Target file: ${PACKAGE}"

        case "${COMPRESSION}" in
            "gz")
                echo "Packaging with GZIP..."
                GZ_OPT=-9 tar -c --use-compress-program=pigz -f "${PACKAGE}" ${TARGET} ;;
            "xz")
                echo "Packaging with XZ..."
                XZ_OPT=-9 tar -c --use-compress-program=pxz -f "${PACKAGE}" ${TARGET} ;;
            *)
                die "Invalid compression specified... skipping" ;;
        esac
    fi

    set_build_state ${FUNCNAME[0]}    
}


# Ending information
function ending_info() {

    check_build_state ${FUNCNAME[0]} && return

    END=$(date +%s)

    [[ -z ${VERBOSE} ]] && exec 1>&5 2>&6
    if [[ -e ${TARGET}/bin/${TARGET}-gcc ]]; then
        header "BUILD SUCCESSFUL" ${VERBOSE:-"--no-first-echo"}
        echo "${BOLD}Script duration:${RST} $(format_time "${START}" "${END}")"
        echo "${BOLD}GCC version:${RST} $(${TARGET}/bin/${TARGET}-gcc --version | head -n 1)"
        if [[ -n ${COMPRESSION} ]] && [[ -e ${PACKAGE} ]]; then
            echo "${BOLD}File location:${RST} $(pwd)/${PACKAGE}"
            echo "${BOLD}File size:${RST} $(du -h "${PACKAGE}" | awk '{print $1}')"
        else
            echo "${BOLD}Toolchain location:${RST} $(pwd)/${TARGET}"
        fi
    else
        header "BUILD FAILED"
    fi

    # Alert to script end
    echo "\a"

    set_build_state ${FUNCNAME[0]}    
}

parse_parameters "${@}"
setup_variables
setup_environment
trap 'unmount_tmpfs; die "Manually aborted!" -n' SIGINT SIGTERM
trap 'unmount_tmpfs' EXIT
#clean_up
build_binaries
download_sources
extract_sources
#update_repos
#setup_env
build_binutils
build_headers
build_gcc
#build_glibc
#install_gcc
#package_tc
#ending_info
