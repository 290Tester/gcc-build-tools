#!/usr/bin/env bash

###########
# SOURCES #
###########

# http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ # credits for almost everything
# http://www.mpfr.org/
# https://gmplib.org/
# http://www.multiprecision.org/
# http://isl.gforge.inria.fr/
# https://www.gnu.org/software/binutils/
# https://www.gnu.org/software/libc/
# https://www.kernel.org/
# https://git.linaro.org/toolchain/gcc.git # linaro and gnu


#########
# USAGE #
#########

# bash build -h


#############
# VARIABLES #
#############

# Default options, can be edited or modified here OR changed with parameter below
TARGET="aarch64-linux-gnu"
ARCH="arm64"
GCC="gcc-6-branch"
TMPFS="yes"

# Other variables
CONFIGURATION="--disable-multilib --disable-werror"
BASH_DIR=$( cd $( dirname $( readlink -f "${BASH_SOURCE[0]}" ) ) && pwd )
INSTALL="${BASH_DIR}/${TARGET}"
BINUTILS="binutils-2_28-branch"
GMP="gmp-6.1.2"
MPFR="mpfr-3.1.5"
MPC="mpc-1.0.3"
ISL="master"
GLIBC="glibc-2.25"
JOBS="-j$( nproc --all )"
PATH=${INSTALL}/bin:${PATH}

# Colors
BOLD="\033[1m"
RED="\033[01;31m"
RST="\033[0m"
YLW="\033[01;33m"


#############
# FUNCTIONS #
#############

# Prints a formatted header to let the user know what's being done
function echoText() {
    echo -e ${RED}
    echo -e "====$( for i in $( seq ${#1} ); do echo -e "=\c"; done )===="
    echo -e "==  ${1}  =="
    echo -e "====$( for i in $( seq ${#1} ); do echo -e "=\c"; done )===="
    echo -e ${RST}
}

# Prints an error in bold red
function reportError() {
    echo -e ""
    echo -e ${RED}"${1}"${RST}
    if [[ -z ${2} ]]; then
        echo -e ""
    fi
}

# Prints a warning in bold yellow
function reportWarning() {
    echo -e ""
    echo -e ${YLW}"${1}"${RST}
    if [[ -z ${2} ]]; then
        echo -e ""
    fi
}

# Formats the time for the end
function format_time() {
    MINS=$(((${2}-${1})/60))
    SECS=$(((${2}-${1})%60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((${MINS}/60))
        MINS=$((${MINS}%60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo ${TIME_STRING}
}

# Help menu function
function help_menu() {
    echo -e "${BOLD}OVERVIEW:${RST} Builds an aarch64 gcc toolchain\n"
    echo -e "${BOLD}USAGE:${RST} bash ${0} <options>\n"
    echo -e "${BOLD}EXAMPLE:${RST} bash ${0} -u -c -b\n"
    echo -e "${BOLD}OPTIONAL PARAMETERS:${RST}"
    echo -e "  -a  | --arm:         Builds targeting arm-linux-gnueabi instead of aarch64-linux-gnu"
    echo -e "  -b  | --build:       Builds the toolchain"
    echo -e "  -c  | --clean:       Cleans up the last compilation"
    echo -e "  -d  | --download:    Downloads the necessary components to build"
    echo -e "  -l  | --linaro:      Use Linaro's gcc branch instead of GNU's"
    echo -e "  -nt | --no-tmpfs:    If you don't have a lot of RAM, add this flag"
    echo -e "  -u  | --update:      Updates the downloaded components\n"
    echo -e "Download MUST be run before building. No options falls back to just building\n"
    exit
}


##############
# Parameters #
##############

# If there are no parameters, assume user just wants to build
[[ $? = 0 ]] && BUILD=true

# Otherwise, filter and set flags
while [[ $# -ge 1 ]]; do
    case "${1}" in
        "-a"|"--arm")
            TARGET=arm-linux-gnueabi
            ARCH=arm ;;
        "-b"|"--build")
            BUILD=true ;;
        "-c"|"--clean")
            CLEAN=true ;;
        "-d"|"--download")
            DOWNLOAD=true ;;
        "-h"|"--help")
            echo; help_menu ;;
        "-l"|"--linaro")
            # There are a few Linaro branches to consider:
            # linaro-local/releases/linaro-6.3-2017.05
            # linaro-local/gcc-6-integration-branch
            # linaro/gcc-6-branch
            GCC="linaro-local/releases/linaro-6.3-2017.05" ;;
        "-nt"|"--no-tmpfs")
            TMPFS="no" ;;
        "-u"|"--update")
            UPDATE=true ;;
    esac

    shift
done


#######################
# DOWNLOADING SOURCES #
#######################

START=$( date +%s )

if [[ ${DOWNLOAD} = true ]]; then
    echoText "DOWNLOADING SOURCES"

    if [[ ! -e ${MPFR}.tar.xz ]] && [[ ! -d ${MPFR} ]]; then
        wget http://www.mpfr.org/mpfr-current/${MPFR}.tar.xz &
        EX=1
    fi
    if [[ ! -e ${GMP}.tar.xz ]] && [[ ! -d ${GMP} ]]; then
        wget ftp://ftp.gnu.org/gnu/gmp/${GMP}.tar.xz &
        EX=1
    fi
    if [[ ! -e ${MPC}.tar.gz ]] && [[ ! -d ${MPC} ]]; then
        wget ftp://ftp.gnu.org/gnu/mpc/${MPC}.tar.gz &
        EX=1
    fi
    if [[ ! -e ${GLIBC}.tar.xz ]] && [[ ! -d ${GLIBC} ]]; then
        wget http://ftp.gnu.org/gnu/glibc/${GLIBC}.tar.xz &
        EX=1
	fi
    if [[ ! -e isl ]]; then
        git clone git://repo.or.cz/isl.git -b ${ISL} &
    fi
    if [[ ! -e binutils ]]; then
        git clone https://git.linaro.org/toolchain/binutils-gdb.git binutils -b ${BINUTILS} &
    fi
    if [[ ! -e gcc ]]; then
        git clone https://git.linaro.org/toolchain/gcc.git &
    fi
    if [[ ! -e linux ]]; then
        git clone https://github.com/torvalds/linux.git &
	fi
    for JOB in $( jobs -p ); do
	    wait ${JOB}
    done
    if [[ ${EX} = 1 ]]; then
        for F in *.tar*; do tar xfk ${F}; done
        rm *.tar*
    fi
    if [[ -d isl ]]; then
        cd isl && ./autogen.sh && cd ..
    fi
fi


############
# CLEANING #
############

if [[ ${CLEAN} = true ]]; then
    echoText "CLEANING UP"

    rm -rf build-glibc/*
    rm -rf build-gcc/*
    rm -rf build-binutils/*
    rm -rf ${TARGET}-*.*
    rm -rf ${TARGET}
    echo "Clean up successful!"
fi


############
# UPDATING #
############

if [[ ${UPDATE} = true ]] || [[ ${DOWNLOAD} = true ]]; then
    echoText "UPDATING SOURCES"

    cd isl
    git remote update
    git checkout ${ISL}
    git merge origin/${ISL}
    ./autogen.sh

    cd ../binutils
    git remote update
    git checkout ${BINUTILS}
    git merge origin/${BINUTILS}

    cd ../gcc
    git remote update
    git checkout ${GCC}
    git merge origin/${GCC}

    cd ../linux
    git remote update
    git merge origin/master

    cd ..
fi


###############
# PREPARATION #
###############

if [[ -z ${BUILD} ]]; then
    reportError "Building was not requested"
    help_menu
elif [[ ! -d gcc ]]; then
    reportError "GCC source is missing! Did you run with --download?"
    help_menu
fi

mkdir -p build-glibc
mkdir -p build-gcc
mkdir -p build-binutils

if [[ ${TMPFS} = "yes" ]]; then
    sudo mount -t tmpfs -o rw none build-glibc
    sudo mount -t tmpfs -o rw none build-gcc
    sudo mount -t tmpfs -o rw none build-binutils
fi

cd gcc
ln -s -f ../${MPFR} mpfr
ln -s -f ../${GMP} gmp
ln -s -f ../${MPC} mpc
ln -s -f ../isl isl
cd ..


############
# BUILDING #
############

echoText "BUILDING BINUTILS"
cd build-binutils
../binutils/configure ${CONFIGURATION} --target=${TARGET} --prefix=${INSTALL} --disable-gdb
make ${JOBS} || exit 1
make install ${JOBS} || exit 1


echoText "MAKING LINUX HEADERS"
cd ../linux
make ARCH=${ARCH} INSTALL_HDR_PATH=${INSTALL}/${TARGET} headers_install ${JOBS} || exit 1


echoText "MAKING GCC"
cd ../build-gcc
../gcc/configure ${CONFIGURATION} --enable-languages=c --target=${TARGET} --prefix=${INSTALL}
make all-gcc ${JOBS} || exit 1
make install-gcc ${JOBS} || exit 1
if [[ ${ARCH} = "x86_64" ]]; then
    make all-target-libgcc ${JOBS} || exit 1
    make install-target-libgcc ${JOBS} || exit 1
fi


echoText "MAKING GLIBC"
cd ../build-glibc
../${GLIBC}/configure --prefix=${INSTALL}/${TARGET} --build=${MACHTYPE} --host=${TARGET} \
                      --target=${TARGET} --with-headers=${INSTALL}/${TARGET}/include \
                      ${CONFIGURATION} libc_cv_forced_unwind=yes
make install-bootstrap-headers=yes install-headers ${JOBS} || exit 1
make csu/subdir_lib ${JOBS} || exit 1
install csu/crt1.o csu/crti.o csu/crtn.o ${INSTALL}/${TARGET}/lib
${TARGET}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${INSTALL}/${TARGET}/lib/libc.so
touch ${INSTALL}/${TARGET}/include/gnu/stubs.h
if [[ ${ARCH} = "x86_64" ]]; then
    make ${JOBS} || exit 1
    make install ${JOBS} || exit 1
fi

if [[ ${ARCH} != "x86_64" ]]; then
    cd ../build-gcc
    make all-target-libgcc ${JOBS} || exit 1
    make install-target-libgcc ${JOBS} || exit 1

	cd ../build-glibc
    make ${JOBS} || exit 1
    make install ${JOBS} || exit 1
fi


echoText "INSTALLING GCC"
cd ../build-gcc
make all ${JOBS} || exit 1
make install ${JOBS} || exit 1
cd ..


if [[ ${TMPFS} = yes ]]; then
	sudo umount -f build-glibc
	sudo umount -f build-gcc
	sudo umount -f build-binutils
fi


#############
# PACKAGING #
#############

if [[ $( echo ${GCC} | grep linaro ) ]]; then
	TAG=linaro-$( TZ=UTC date +%Y%m%d )
else
	TAG=$( TZ=UTC date +%Y%m%d ) 
fi

if [[ $( grep -i "Ubuntu" /etc/os-release ) ]]; then
    DISTRO=-ubuntu
elif [[ $( grep -i "Arch" /etc/os-release ) ]]; then
	DISTRO=-arch
fi

echoText "PACKAGING TOOLCHAIN"

echo "Target file: ${TARGET}-${TAG}${DISTRO}.tar.xz"
echo "Packaging..."
XZ_OPT=-9 tar cJf ${TARGET}-${TAG}${DISTRO}.tar.xz ${TARGET}


#################
# ENDING OUTPUT #
#################

END=$( date +%s )

if [[ -e ${TARGET}-${TAG}${DISTRO}.tar.xz ]]; then
    echoText "BUILD SUCESSFUL"
    echo -e "${BOLD}Script duration:${RST} $( format_time ${START} ${END} )"
    echo -e "${BOLD}File location:${RST} ${TARGET}-${TAG}${DISTRO}.tar.xz"
    echo -e "${BOLD}File size:${RST} $( du -h ${TARGET}-${TAG}${DISTRO}.tar.xz | awk '{print $1}' )"
else
    echoText "BUILD FAILED"
fi

# Alert to script end
echo -e "\a"
