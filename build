#!/bin/bash

# http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ # credits for almost everything
# http://www.mpfr.org/
# https://gmplib.org/
# http://www.multiprecision.org/
# http://isl.gforge.inria.fr/
# https://www.gnu.org/software/binutils/
# https://www.gnu.org/software/libc/
# https://www.kernel.org/
# https://git.linaro.org/toolchain/gcc.git # linaro and gnu
# This script should be able to build most versions (i only tried 4.9 5 and 6/tends to go bad somtimes)
# How to use.... (UBUNTU 16.04/10 clean install)
# ./build -h

CONFIGURATION="--disable-multilib --disable-werror"
target="aarch64-linux-gnu"
GCC="gcc-6-branch"
ARCH="arm64"
install="$PWD/$target"
binutils="binutils-2_28-branch"
gmp="gmp-6.1.2"
mpfr="mpfr-3.1.5"
mpc="mpc-1.0.3"
isl="master"
glibc="glibc-2.25"
tmpfs="yes" # set this to an no if your machin does not have much ram
job="-j$(cat /proc/cpuinfo | grep -c processor)"
PATH=$install/bin:$PATH

function help_menu() {
	BOLD="\033[1m"
	RST="\033[0m"
	echo -e ""
	echo -e "${BOLD}OVERVIEW:${RST} Builds an aarch64 gcc toolchain\n"
	echo -e "${BOLD}USAGE:${RST} bash ${0} <options>\n"
	echo -e "${BOLD}EXAMPLE:${RST} bash ${0} -u -c -b\n"
	echo -e "${BOLD}OPTIONAL PARAMETERS:${RST}"
	echo -e "  -b | --build:       Builds the toolchain"
	echo -e "  -c | --clean:       Cleans up the last compilation"
	echo -e "  -d | --download:    Downloads the necessary components to build"
	echo -e "  -l | --linaro:      Use Linaro's gcc branch instead of GNU's"
	echo -e "  -u | --update:      Updates the downloaded components\n"
	echo -e "Download MUST be run before building. No options falls back to just building\n"
}

# Get parameters
[[ $? = 0 ]] && BUILD=true

while [[ $# -ge 1 ]]; do
	case "${1}" in
		"-b"|"--build")
			BUILD=true ;;
		"-c"|"--clean")
			CLEAN=true ;;
		"-d"|"--download")
			DOWNLOAD=true ;;
		"-h"|"--help")
			help_menu && exit ;;
		"-l"|"--linaro")
			GCC="linaro-local/releases/linaro-6.3-2017.05" ;;
		"-u"|"--update")
			UPDATE=true ;;
	esac

	shift
done

if [[ ${DOWNLOAD} = true ]]; then
	if [ ! -e $mpfr.tar.xz ] && [ ! -d $mpfr ]; then
		wget http://www.mpfr.org/mpfr-current/$mpfr.tar.xz &
		EX=1
	fi
	if [ ! -e $gmp.tar.xz ] && [ ! -d $gmp ]; then
		wget ftp://ftp.gnu.org/gnu/gmp/$gmp.tar.xz &
		EX=1
	fi
	if [ ! -e $mpc.tar.gz ] && [ ! -d $mpc ]; then
		wget ftp://ftp.gnu.org/gnu/mpc/$mpc.tar.gz &
		EX=1
	fi
	if [ ! -e $glibc.tar.xz ] && [ ! -d $glibc ]; then
		wget http://ftp.gnu.org/gnu/glibc/$glibc.tar.xz &
		EX=1
	fi
	if [ ! -e isl ]; then
		git clone git://repo.or.cz/isl.git -b $isl &
	fi
	if [ ! -e binutils ]; then
		git clone https://git.linaro.org/toolchain/binutils-gdb.git binutils -b $binutils &
	fi
	if [ ! -e gcc ]; then
		git clone https://git.linaro.org/toolchain/gcc.git &
	fi
	if [ ! -e linux ]; then
		git clone https://github.com/torvalds/linux.git &
	fi
	for job in `jobs -p` 
	do
		wait $job 
	done
	if [ "$EX" == "1" ]; then
		for f in *.tar*; do tar xfk $f; done
		rm *.tar*
	fi
	if [ -d isl ]; then
		cd isl && ./autogen.sh && cd ..
	fi
	echo "done downloading"
fi
if [[ ${CLEAN} = true ]]; then
	rm -rf build-glibc/*
	rm -rf build-gcc/*
	rm -rf build-binutils/*
	rm $target.*
	rm -rf $target
	echo "done cleaning up"
fi
if [[ ${UPDATE} = true ]] || [[ ${DOWNLOAD} = true ]]; then
	cd isl
		git remote update
		git checkout $isl
		git merge origin/$isl
		./autogen.sh
	cd ..
	cd binutils
		git remote update
		git checkout $binutils
		git merge origin/$binutils
	cd ..
	cd gcc
		git remote update
		git checkout $GCC
		git merge origin/$GCC
	cd ..
	cd linux
		git remote update
		git merge origin/master
	cd ..
	echo "done updating"
fi

[[ -z ${BUILD} ]] && exit

mkdir -p build-glibc
mkdir -p build-gcc
mkdir -p build-binutils

if [ "$tmpfs" == "yes" ]; then
	sudo mount -t tmpfs -o rw none build-glibc
	sudo mount -t tmpfs -o rw none build-gcc
	sudo mount -t tmpfs -o rw none build-binutils
fi

if [[ ! -d gcc ]]; then
	help_menu && exit
fi

cd gcc
	ln -s -f ../$mpfr mpfr
	ln -s -f ../$gmp gmp
	ln -s -f ../$mpc mpc
	ln -s -f ../isl isl
cd ..

echo "stage: 1"
cd build-binutils
	../binutils/configure $CONFIGURATION --target=$target --prefix=$install --disable-gdb
	make $job || exit 1
	make install $job || exit 1
cd ..

echo "stage: 2"
cd linux
	make ARCH=$ARCH INSTALL_HDR_PATH=$install/$target headers_install $job || exit 1
cd ..

echo "stage: 3"
cd build-gcc
	../gcc/configure $CONFIGURATION --enable-languages=c --target=$target --prefix=$install
	make all-gcc $job || exit 1
	make install-gcc $job || exit 1
	if [ "$ARCH" == "x86_64" ]; then
		make all-target-libgcc $job || exit 1
		make install-target-libgcc $job || exit 1
	fi
cd ..

echo "stage: 4"
cd build-glibc
	../$glibc/configure --prefix=$install/$target --build=$MACHTYPE --host=$target --target=$target --with-headers=$install/$target/include $CONFIGURATION libc_cv_forced_unwind=yes
	make install-bootstrap-headers=yes install-headers $job || exit 1
	make csu/subdir_lib $job || exit 1
	install csu/crt1.o csu/crti.o csu/crtn.o $install/$target/lib
	$target-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o $install/$target/lib/libc.so
	touch $install/$target/include/gnu/stubs.h
	if [ "$ARCH" == "x86_64" ]; then
		make $job || exit 1
		make install $job || exit 1
	fi
cd ..

if [ "$ARCH" != "x86_64" ]; then
	echo "stage: 4.1"
	cd build-gcc
		make all-target-libgcc $job || exit 1
		make install-target-libgcc $job || exit 1
	cd ..

	echo "stage: 4.2"
	cd build-glibc
		make $job || exit 1
		make install $job || exit 1
	cd ..
fi

echo "stage: 5"
cd build-gcc
	make all $job || exit 1
	make install $job || exit 1
cd ..

echo "stage: done"
if [ "$tmpfs" == "yes" ]; then
	sudo umount -f build-glibc
	sudo umount -f build-gcc
	sudo umount -f build-binutils
fi

XZ_OPT=-9 tar cJf $target.tar.xz $target

