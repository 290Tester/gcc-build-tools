#!/usr/bin/env bash
#
# GCC cross compiler  compilation script
#
# Copyright (C) 2016-2017 USBhost
# Copyright (C) 2016-2017 Joe Maples
# Copyright (C) 2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

###########
# SOURCES #
###########

# http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ # credits for almost everything
# http://www.mpfr.org/
# https://gmplib.org/
# http://www.multiprecision.org/
# http://isl.gforge.inria.fr/
# https://www.gnu.org/software/binutils/
# https://www.gnu.org/software/libc/
# https://www.kernel.org/
# https://git.linaro.org/toolchain/gcc.git # linaro and gnu


#########
# USAGE #
#########

# bash build -h


#############
# FUNCTIONS #
#############

BASH_DIR=$( cd $( dirname $( readlink -f "${BASH_SOURCE[0]}" ) ) && pwd )
source ${BASH_DIR}/functions


##############
# Parameters #
##############

# If there are no parameters, assume user just wants to build
[[ $# -eq 0 ]] && BUILD=true

# Otherwise, filter and set flags
while [[ $# -ge 1 ]]; do
    case "${1}" in
        "-a"|"--arm")
            TARGET="arm-linux-gnueabi"
            ARCH="arm" ;;

        "-x6"|"--x86_64")
            TARGET="x86_64-linux-gnu"
            ARCH="x86_64" ;;

        "-b"|"--build")
            BUILD=true ;;

        "-c"|"--clean")
            CLEAN=true ;;

        "-d"|"--download")
            DOWNLOAD=true ;;

        "-h"|"--help")
            echo; help_menu ;;

        "-l"|"--linaro")
            LINARO=true ;;

        "-p"|"--package")
            shift
            COMPRESSION=${1};;

        "-nt"|"--no-tmpfs")
            TMPFS="no" ;;

        "-u"|"--update")
            UPDATE=true ;;

        "-v"|"--version")
            shift
            VERSION=${1} ;;

    esac

    shift
done

# Default values
[[ -z ${ARCH} ]] && ARCH="arm64"
[[ -z ${LINARO} ]] && LINARO=false
[[ -z ${TARGET} ]] && TARGET="aarch64-linux-gnu"
[[ -z ${TMPFS} ]] && TMPFS="yes"
[[ -z ${VERSION} ]] && VERSION=7

# Set GCC branch based on version and Linaro or not
case "${LINARO}:${VERSION}" in
    "false:4") GCC=gcc-4_9-branch ;;
    "false:5") GCC=gcc-5-branch ;;
    "false:6") GCC=gcc-6-branch ;;
    "false:7") GCC=gcc-7-branch ;;
    "false:8") GCC=master ;;
    "true:4") GCC=linaro-local/releases/linaro-4.9-2017.01 ;;
    "true:5") GCC=linaro-local/gcc-5-integration-branch ;;
    "true:6") GCC=linaro-local/gcc-6-integration-branch ;;
    "true:7") GCC=linaro-local/gcc-7-integration-branch ;;
    "true:8") report_error "There's no such thing as Linaro 8.x Clannad..." && exit ;;
esac


#############
# VARIABLES #
#############

# Configuration variables
CONFIGURATION="--disable-multilib --disable-werror"
INSTALL="${BASH_DIR}/${TARGET}"
PATH=${INSTALL}/bin:${PATH}
JOBS="-j$( nproc --all )"

# Binary versions
BINUTILS="binutils-2_29-branch"
GMP="gmp-6.1.2"
MPFR="mpfr-3.1.5"
MPC="mpc-1.0.3"
ISL="master"
GLIBC="glibc-2.26"


#######################
# DOWNLOADING SOURCES #
#######################

START=$( date +%s )

if [[ ${DOWNLOAD} = true ]]; then
    header "DOWNLOADING SOURCES"

    if [[ ! -e ${MPFR}.tar.xz ]] && [[ ! -d ${MPFR} ]]; then
        wget http://www.mpfr.org/mpfr-current/${MPFR}.tar.xz &
        EX=1
    fi
    if [[ ! -e ${GMP}.tar.xz ]] && [[ ! -d ${GMP} ]]; then
        wget ftp://ftp.gnu.org/gnu/gmp/${GMP}.tar.xz &
        EX=1
    fi
    if [[ ! -e ${MPC}.tar.gz ]] && [[ ! -d ${MPC} ]]; then
        wget ftp://ftp.gnu.org/gnu/mpc/${MPC}.tar.gz &
        EX=1
    fi
    if [[ ! -e ${GLIBC}.tar.xz ]] && [[ ! -d ${GLIBC} ]]; then
        wget http://ftp.gnu.org/gnu/glibc/${GLIBC}.tar.xz &
        EX=1
    fi
    if [[ ! -e isl ]]; then
        git clone git://repo.or.cz/isl.git -b ${ISL} &
    fi
    if [[ ! -e binutils ]]; then
        git clone https://git.linaro.org/toolchain/binutils-gdb.git binutils -b ${BINUTILS} &
    fi
    if [[ ! -e gcc ]]; then
        git clone https://git.linaro.org/toolchain/gcc.git &
    fi
    if [[ ! -e linux ]]; then
        git clone https://github.com/torvalds/linux.git &
    fi
    for JOB in $( jobs -p ); do
	    wait ${JOB}
    done
    if [[ ${EX} = 1 ]]; then
        for F in *.tar*; do tar xfk ${F}; done
        rm *.tar*
    fi
    if [[ -d isl ]]; then
        cd isl && ./autogen.sh && cd ..
    fi
fi


############
# CLEANING #
############

if [[ ${CLEAN} = true ]]; then
    header "CLEANING UP"

    rm -rf build-glibc/*
    rm -rf build-gcc/*
    rm -rf build-binutils/*
    rm -rf *.tar.${COMPRESSION}
    rm -rf *linux-gnu*
    if [[ "$( ls -A build-glibc )" ]] ||
       [[ "$( ls -A build-gcc )" ]] ||
       [[ "$( ls -A build-binutils )" ]] ||
       [[ -f *.tar.${COMPRESSION} ]] ||
       [[ -f *linux-gnu* ]]; then

        echo "Clean up failed! Aborting. Try checking that you have proper permissions to delete files."
        exit

    else
        echo "Clean up successful!"

    fi
fi


############
# UPDATING #
############

if [[ ${UPDATE} = true ]] || [[ ${DOWNLOAD} = true ]]; then
    header "UPDATING SOURCES"

    cd isl
    git remote update
    git checkout ${ISL}
    git merge origin/${ISL}
    ./autogen.sh

    cd ../binutils
    git remote update
    git checkout ${BINUTILS}
    git merge origin/${BINUTILS}

    cd ../gcc
    git remote update
    git checkout ${GCC}
    git merge origin/${GCC}

    cd ../linux
    git remote update
    git merge origin/master

    cd ..
fi


###############
# PREPARATION #
###############

if [[ -z ${BUILD} ]]; then
    report_warning "Building was not requested, ending script!" && exit
elif [[ ! -d gcc ]]; then
    report_error "GCC source is missing! Did you run with --download or -d ?"
    help_menu
fi

mkdir -p build-glibc
mkdir -p build-gcc
mkdir -p build-binutils

if [[ ${TMPFS} = "yes" ]]; then
    if [[ check_sudo ]]; then
        echo "Please enter your password at the following prompt. It is needed so we can mount some folders on tmpfs.";
    fi
    sudo mount -t tmpfs -o rw none build-glibc
    sudo mount -t tmpfs -o rw none build-gcc
    sudo mount -t tmpfs -o rw none build-binutils
fi

cd gcc
ln -s -f ../${MPFR} mpfr
ln -s -f ../${GMP} gmp
ln -s -f ../${MPC} mpc
ln -s -f ../isl isl
cd ..


############
# BUILDING #
############

header "BUILDING BINUTILS"
cd build-binutils
../binutils/configure ${CONFIGURATION} \
                      --target=${TARGET} \
                      --prefix=${INSTALL} \
                      --disable-gdb
make ${JOBS} || exit 1
make install ${JOBS} || exit 1


header "MAKING LINUX HEADERS"
cd ../linux
make ARCH=${ARCH} INSTALL_HDR_PATH=${INSTALL}/${TARGET} headers_install ${JOBS} || exit 1


header "MAKING GCC"
cd ../build-gcc
../gcc/configure ${CONFIGURATION} \
                 --enable-languages=c \
                 --target=${TARGET} \
                 --prefix=${INSTALL}
make all-gcc ${JOBS} || exit 1
make install-gcc ${JOBS} || exit 1
if [[ ${ARCH} = "x86_64" ]]; then
    make all-target-libgcc ${JOBS} || exit 1
    make install-target-libgcc ${JOBS} || exit 1
fi


header "MAKING GLIBC"
cd ../build-glibc
../${GLIBC}/configure --prefix=${INSTALL}/${TARGET} \
                      --build=${MACHTYPE} \
                      --host=${TARGET} \
                      --target=${TARGET} \
                      --with-headers=${INSTALL}/${TARGET}/include \
                      ${CONFIGURATION} libc_cv_forced_unwind=yes
make install-bootstrap-headers=yes install-headers ${JOBS} || exit 1
make csu/subdir_lib ${JOBS} || exit 1
install csu/crt1.o csu/crti.o csu/crtn.o ${INSTALL}/${TARGET}/lib
${TARGET}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${INSTALL}/${TARGET}/lib/libc.so
touch ${INSTALL}/${TARGET}/include/gnu/stubs.h
if [[ ${ARCH} = "x86_64" ]]; then
    make ${JOBS} || exit 1
    make install ${JOBS} || exit 1
fi

if [[ ${ARCH} != "x86_64" ]]; then
    cd ../build-gcc
    make all-target-libgcc ${JOBS} || exit 1
    make install-target-libgcc ${JOBS} || exit 1

	cd ../build-glibc
    make ${JOBS} || exit 1
    make install ${JOBS} || exit 1
fi


header "INSTALLING GCC"
cd ../build-gcc
make all ${JOBS} || exit 1
make install ${JOBS} || exit 1
cd ..


if [[ ${TMPFS} = yes ]]; then
    [[ check_sudo ]] && echo "Please enter your password at the following prompt. It is needed so we can unmount some folders from tmpfs.";
    sudo umount -f build-glibc
    sudo umount -f build-gcc
    sudo umount -f build-binutils
fi


#############
# PACKAGING #
#############

if [[ -n ${COMPRESSION} ]]; then
    if [[ $( echo ${GCC} | grep linaro ) ]]; then
	    TAG=linaro-$( TZ=UTC date +%Y%m%d )
    else
	    TAG=$( TZ=UTC date +%Y%m%d )
    fi

    PACKAGE=${TARGET}-${VERSION}.x-${TAG}.tar.${COMPRESSION}

    header "PACKAGING TOOLCHAIN"

    echo "Target file: ${PACKAGE}"

    case "${COMPRESSION}" in
        "gz")
            echo "Packaging with GZIP..."
            GZ_OPT=-9 tar -zcf ${PACKAGE} ${TARGET} ;;
        "xz")
            echo "Packaging with XZ..."
            XZ_OPT=-9 tar -Jcf ${PACKAGE} ${TARGET} ;;
        *)
            report_error "Invalid compression specified... skipping" ;;
    esac
fi

#################
# ENDING OUTPUT #
#################

END=$( date +%s )

if [[ -e ${TARGET}/bin/${TARGET}-gcc ]]; then
    header "BUILD SUCCESSFUL"
    echo -e "${BOLD}Script duration:${RST} $( format_time ${START} ${END} )"
    if [[ -n ${COMPRESSION} ]] && [[ -e ${PACKAGE} ]]; then
        echo -e "${BOLD}File location:${RST} $(pwd)/${PACKAGE}"
        echo -e "${BOLD}File size:${RST} $( du -h ${PACKAGE} | awk '{print $1}' )"
    else
        echo -e "${BOLD}Toolchain location:${RST} $(pwd)/${TARGET}"
    fi
else
    header "BUILD FAILED"
fi

# Alert to script end
echo -e "\a"
